#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <string>
#include <chrono>
#include <thread>

using namespace std;
using namespace std::chrono;
using namespace std::this_thread;

void Turing(string state[], char symbolrn[], char nextsymbol[], char dr[], string nextstate[], string line, int headmark, int k)
{
	int n = line.length();
	string curstate = "0";
	string head = " ";
	for (int i = 0; i < n - 1; i++) {
		head.append(" ");
	}
	cout << n;
	cout << head << endl;
	head[headmark] = '^';
	while (curstate != "X") {
		for (int i = 0; i < k; i++) {
			if (curstate == state[i]) {
				if (symbolrn[i] == line[headmark]) {
					line[headmark] = nextsymbol[i];
					curstate = nextstate[i];
					if (curstate == "X") {
						break;
					}
					if (dr[i] == 'R') {
						head[headmark] = ' ';
						headmark++;
						head[headmark] = '^';
					}
					else {
						head[headmark] = ' ';
						headmark--;
						head[headmark] = '^';
					}
				}
			}
		}
		system("cls");
		cout << line << endl;
		cout << head << endl;
		sleep_for(milliseconds(60));
	}
}

int main()
{
	char dr[100], symbolrn[100], nextsymbol[100];
	int headmark, file = 0, k = 0;
	string line, state[100], nextstate[100];
	ifstream myfile;
	while (file < 1 || file > 4) {
		cout << "Choose file to open" << endl;
		cout << "1.   1.txt" << endl;
		cout << "2.   2.txt" << endl;
		cout << "3.   3.txt" << endl;
		cout << "4.   4.txt" << endl;
		cin >> file;
		switch (file) {
		case 1: {myfile.open("1.txt"); break;}
		case 2: {myfile.open("2.txt"); break;}
		case 3: {myfile.open("3.txt"); break;}
		case 4: {myfile.open("4.txt"); break;}
		default: { cout << "You have chosen wrong number, please try again from compatible ones"; sleep_for(seconds(2)); system("cls"); break;}
		}
	}
	cout << " You have chosen: " << file << ".txt" << endl;
	myfile >> headmark;
	myfile >> line;
	while (!myfile.eof()){
		myfile >> state[k] >> symbolrn[k] >> nextsymbol[k] >> dr[k] >> nextstate[k];
		k++;
	}
	myfile.close();
	k--;
	sleep_for(seconds(2));
	system("cls");
	cout << line << endl;
	Turing(state, symbolrn, nextsymbol, dr, nextstate, line, headmark, k);
    return 0;
}
